<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<configuration>
    <Properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <Property name="LOG_HOME" value="/home/sivan/logs/demo-manager"/>
        <Property name="logPattern" value="%d{HH:mm:ss.SSS}|%-5p|%X{LOG_ID}|%C{1.}.%M\(%L\):%m%n" />
    </Properties>
    <!--appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
    <Appenders>
        <!--控制台输出-->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </Console>
        <!--  ACCEPT（放行）、DENY（拒绝）、NEUTRAL（不做任何操作)        -->
        <!--  onMatch  >= level  onMatch指的是日志级别大于等于level时的操作      -->
        <!--  onMismatch < levle onMismatch表示日志级别小于level时的操作,         -->
        <!--  log 级别  off>fatal>error>warn>info>debug>trace>all,                    -->
        <!--   通过添加两组 ThresholdFilter  可以达到一个级别的log一个文件的目的,-->
        <!--error及以上级别输出-->
        <RollingRandomAccessFile name="ErrorFile"
                                 fileName="${LOG_HOME}/demo-manager.error.log"
                                 filePattern="${LOG_HOME}/demo-manager.error.%d{yyyy-MM-dd HH-mm}-%i.log">
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <PatternLayout pattern="${logPattern}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="100 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>
        <!--all及以上级别输出-->
        <RollingRandomAccessFile name="AllFile"
                                 fileName="${LOG_HOME}/demo-manager.log"
                                 filePattern="${LOG_HOME}/demo-manager.%d{yyyy-MM-dd HH-mm}-%i.log">
            <PatternLayout pattern="${logPattern}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="100 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>
    </Appenders>
    <!--将所有输出记录到下面-->
    <Loggers>
        <!--控制第三方log级别-->
        <Logger name="org.mybatis" level="DEBUG"/>
        <Logger name="com.alibaba" level="ERROR"/>
        <Logger name="org.springframework" level="INFO"/>
        <Logger name="java.sql.Connection" level="DEBUG"/>
        <Logger name="java.sql.Statement" level="DEBUG"/>
        <Logger name="java.sql.PreparedStatement" level="DEBUG"/>
        <logger name="com.ule.demo.service.mapper" level="DEBUG"/>

        <Root level="DEBUG">
            <AppenderRef ref="Console" />
            <AppenderRef ref="ErrorFile" />
            <AppenderRef ref="AllFile" />
        </Root>
        <!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
        <!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
        <AsyncLogger name="AsyncLogger" level="trace" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorFile"/>
            <AppenderRef ref="AllFile" />
        </AsyncLogger>
    </Loggers>
</configuration>
